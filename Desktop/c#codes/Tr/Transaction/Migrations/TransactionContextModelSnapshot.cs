// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transaction;

#nullable disable

namespace Transaction.Migrations
{
    [DbContext(typeof(TransactionContext))]
    partial class TransactionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Transaction.Entities.Cash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CashToBeSubmitted")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SalesRepId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Cashes");
                });

            modelBuilder.Entity("Transaction.Entities.GoodReleased", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReleased")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("GoodReleaseds");
                });

            modelBuilder.Entity("Transaction.Entities.GoodReleasedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GoodReleasedId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("GoodReleasedId");

                    b.HasIndex("ProductId");

                    b.ToTable("GoodReleasedProducts");
                });

            modelBuilder.Entity("Transaction.Entities.GoodsReturned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReleased")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("GoodsReturneds");
                });

            modelBuilder.Entity("Transaction.Entities.GoodsReturnedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GoodsReturnedId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("GoodsReturnedId");

                    b.HasIndex("ProductId");

                    b.ToTable("GoodsReturnedProducts");
                });

            modelBuilder.Entity("Transaction.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Transaction.Entities.OpeningStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("OpeningStocks");
                });

            modelBuilder.Entity("Transaction.Entities.OpeningStockProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OpeningStockId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("OpeningStockId");

                    b.HasIndex("ProductId");

                    b.ToTable("OpeningStockProducts");
                });

            modelBuilder.Entity("Transaction.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("CategoryPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CategoryQuantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("UnitOfMeasurement")
                        .HasColumnType("longtext");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Transaction.Entities.ProductPurchace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaceId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchacedPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaceId");

                    b.ToTable("ProductPurchaces");
                });

            modelBuilder.Entity("Transaction.Entities.Purchace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PurchaceReferenceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("Purchaces");
                });

            modelBuilder.Entity("Transaction.Entities.Sales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("SalesRepId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfTransaction")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("SalesRepId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Transaction.Entities.SalesProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductQuantities")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SalesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesId");

                    b.ToTable("SalesProducts");
                });

            modelBuilder.Entity("Transaction.Entities.SalesRep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SalesReps");
                });

            modelBuilder.Entity("Transaction.Entities.ShopItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("ShopItems");
                });

            modelBuilder.Entity("Transaction.Entities.StoreItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("StoreItems");
                });

            modelBuilder.Entity("Transaction.Entities.ValidClosingStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("NegativeDifference")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PositiveDiiference")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalCash")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("ValidClosingStocks");
                });

            modelBuilder.Entity("Transaction.Entities.ValidClosingStockProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantities")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ValidClosingStockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ValidClosingStockId");

                    b.ToTable("ValidClosingStockProducts");
                });

            modelBuilder.Entity("Transaction.Entities.GoodReleasedProduct", b =>
                {
                    b.HasOne("Transaction.Entities.GoodReleased", "GoodReleased")
                        .WithMany("GoodReleasedProducts")
                        .HasForeignKey("GoodReleasedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodReleased");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Transaction.Entities.GoodsReturnedProduct", b =>
                {
                    b.HasOne("Transaction.Entities.GoodsReturned", "GoodsReturned")
                        .WithMany("GoodsReturnedProducts")
                        .HasForeignKey("GoodsReturnedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodsReturned");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Transaction.Entities.OpeningStockProduct", b =>
                {
                    b.HasOne("Transaction.Entities.OpeningStock", "OpeningStock")
                        .WithMany("OpeningStockProducts")
                        .HasForeignKey("OpeningStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpeningStock");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Transaction.Entities.ProductPurchace", b =>
                {
                    b.HasOne("Transaction.Entities.Product", "Product")
                        .WithMany("ProductPurchaces")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction.Entities.Purchace", "Purchace")
                        .WithMany("ProductPurchaces")
                        .HasForeignKey("PurchaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchace");
                });

            modelBuilder.Entity("Transaction.Entities.Sales", b =>
                {
                    b.HasOne("Transaction.Entities.SalesRep", "SalesRep")
                        .WithMany()
                        .HasForeignKey("SalesRepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesRep");
                });

            modelBuilder.Entity("Transaction.Entities.SalesProduct", b =>
                {
                    b.HasOne("Transaction.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction.Entities.Sales", "Sales")
                        .WithMany("SalesProducts")
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Transaction.Entities.ValidClosingStockProduct", b =>
                {
                    b.HasOne("Transaction.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction.Entities.ValidClosingStock", "ValidClosingStock")
                        .WithMany("ValidClosingStockProducts")
                        .HasForeignKey("ValidClosingStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ValidClosingStock");
                });

            modelBuilder.Entity("Transaction.Entities.GoodReleased", b =>
                {
                    b.Navigation("GoodReleasedProducts");
                });

            modelBuilder.Entity("Transaction.Entities.GoodsReturned", b =>
                {
                    b.Navigation("GoodsReturnedProducts");
                });

            modelBuilder.Entity("Transaction.Entities.OpeningStock", b =>
                {
                    b.Navigation("OpeningStockProducts");
                });

            modelBuilder.Entity("Transaction.Entities.Product", b =>
                {
                    b.Navigation("ProductPurchaces");
                });

            modelBuilder.Entity("Transaction.Entities.Purchace", b =>
                {
                    b.Navigation("ProductPurchaces");
                });

            modelBuilder.Entity("Transaction.Entities.Sales", b =>
                {
                    b.Navigation("SalesProducts");
                });

            modelBuilder.Entity("Transaction.Entities.ValidClosingStock", b =>
                {
                    b.Navigation("ValidClosingStockProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
